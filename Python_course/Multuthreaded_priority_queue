#!/usr/bin/env python
import Queue
import threading
import time
exitFlag = 0
class MyThread(threading.Thread):
    def __init__(self, threadID, name, q):
        threading.Thread.__init__(self)
        self.threadID = threadID
        self.name = name
        self.q = q
    def run(self):
        print ("Starting " + self.name)
        process_data (self.name, self.q)
        print ("Exiting : " + self.name)
def process_data(threadName, q):
    while not exitFlag:
        queueLock.acquire()
        if not workQueue.empty():
               data = q.get()
               queueLock.release()
               print ("%s proessing %s" %(threadName, data))
        else:
               queueLock.release()
        time.sleep(1)
threadList = ["Thread-1","Thread-2","Thread-3"]
nameList = ["One","Two","Three","Four","Five"]
queueLock = threading.Lock()
workQueue = Queue.Queue(10)
threads = []
threadID = 1

#Creating New Threads
for tName in threadList:
    thread = MyThread(threadID, tName, workQueue)
    thread.start()
    threads.append(thread)
    threadID += 1
    
#Fill The Queue
queueLock.acquire()
for word in nameList:
    workQueue.put(word)
queueLock.release()

#Wait For the Queue to Empty
while not workQueue.empty():
    pass
    
#Notify The Threads that it is time to exit
exitFlag = 1

#Wait For All Threads To Complete
for t in threads:
    t.join()
print ("Exiting the main thread")
